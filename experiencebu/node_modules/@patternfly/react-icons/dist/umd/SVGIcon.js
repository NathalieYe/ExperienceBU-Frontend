(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "prop-types", "react"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("prop-types"), require("react"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.propTypes, global.react);
    global.undefined = mod.exports;
  }
})(this, function (exports, _propTypes, _react) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SVGIcon = exports.getSize = exports.IconSize = undefined;

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var React = _interopRequireWildcard(_react);

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function () {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};

    if (obj != null) {
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  let currentId = 0;
  let IconSize = exports.IconSize = undefined;

  (function (IconSize) {
    IconSize["sm"] = "sm";
    IconSize["md"] = "md";
    IconSize["lg"] = "lg";
    IconSize["xl"] = "xl";
  })(IconSize || (exports.IconSize = IconSize = {}));

  const getSize = exports.getSize = size => {
    switch (size) {
      case IconSize.sm:
        return '1em';

      case IconSize.md:
        return '1.5em';

      case IconSize.lg:
        return '2em';

      case IconSize.xl:
        return '3em';

      default:
        return '1em';
    }
  };

  class SVGIcon extends React.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "id", `icon-title-${currentId++}`);
    }

    render() {
      const _this$props = this.props,
            {
        size,
        color,
        title,
        noVerticalAlign,
        config
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["size", "color", "title", "noVerticalAlign", "config"]);

      const hasTitle = Boolean(title);
      const heightWidth = getSize(size);
      const baseAlign = -0.125 * Number.parseFloat(heightWidth);
      const style = noVerticalAlign ? null : {
        verticalAlign: `${baseAlign}em`
      };
      const viewBox = [config.xOffset || 0, config.yOffset || 0, config.width, config.height].join(' ');
      return React.createElement("svg", _extends({
        style: style,
        fill: color,
        height: heightWidth,
        width: heightWidth,
        viewBox: viewBox,
        "aria-labelledby": hasTitle ? this.id : null,
        "aria-hidden": hasTitle ? null : true,
        role: "img"
      }, props), hasTitle && React.createElement("title", {
        id: this.id
      }, title), React.createElement("path", {
        d: config.svgPath,
        transform: config.transform || ''
      }));
    }

  }

  exports.SVGIcon = SVGIcon;

  _defineProperty(SVGIcon, "propTypes", {
    config: _propTypes2.default.shape({
      name: _propTypes2.default.string,
      width: _propTypes2.default.number.isRequired,
      height: _propTypes2.default.number.isRequired,
      svgPath: _propTypes2.default.string.isRequired,
      xOffset: _propTypes2.default.number,
      yOffset: _propTypes2.default.number,
      transform: _propTypes2.default.string
    }).isRequired,
    color: _propTypes2.default.string,
    size: _propTypes2.default.oneOfType([_propTypes2.default.any, _propTypes2.default.any]),
    title: _propTypes2.default.string,
    noVerticalAlign: _propTypes2.default.bool
  });

  _defineProperty(SVGIcon, "defaultProps", {
    color: 'currentColor',
    size: IconSize.sm,
    noVerticalAlign: false
  });
});
//# sourceMappingURL=SVGIcon.js.map