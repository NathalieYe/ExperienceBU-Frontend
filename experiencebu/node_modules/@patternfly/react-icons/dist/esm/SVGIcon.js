import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
let currentId = 0;
export let IconSize;

(function (IconSize) {
  IconSize["sm"] = "sm";
  IconSize["md"] = "md";
  IconSize["lg"] = "lg";
  IconSize["xl"] = "xl";
})(IconSize || (IconSize = {}));

export const getSize = size => {
  switch (size) {
    case IconSize.sm:
      return '1em';

    case IconSize.md:
      return '1.5em';

    case IconSize.lg:
      return '2em';

    case IconSize.xl:
      return '3em';

    default:
      return '1em';
  }
};
export class SVGIcon extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "id", `icon-title-${currentId++}`);
  }

  render() {
    const _this$props = this.props,
          {
      size,
      color,
      title,
      noVerticalAlign,
      config
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["size", "color", "title", "noVerticalAlign", "config"]);

    const hasTitle = Boolean(title);
    const heightWidth = getSize(size);
    const baseAlign = -0.125 * Number.parseFloat(heightWidth);
    const style = noVerticalAlign ? null : {
      verticalAlign: `${baseAlign}em`
    };
    const viewBox = [config.xOffset || 0, config.yOffset || 0, config.width, config.height].join(' ');
    return React.createElement("svg", _extends({
      style: style,
      fill: color,
      height: heightWidth,
      width: heightWidth,
      viewBox: viewBox,
      "aria-labelledby": hasTitle ? this.id : null,
      "aria-hidden": hasTitle ? null : true,
      role: "img"
    }, props), hasTitle && React.createElement("title", {
      id: this.id
    }, title), React.createElement("path", {
      d: config.svgPath,
      transform: config.transform || ''
    }));
  }

}

_defineProperty(SVGIcon, "propTypes", {
  config: _pt.shape({
    name: _pt.string,
    width: _pt.number.isRequired,
    height: _pt.number.isRequired,
    svgPath: _pt.string.isRequired,
    xOffset: _pt.number,
    yOffset: _pt.number,
    transform: _pt.string
  }).isRequired,
  color: _pt.string,
  size: _pt.oneOfType([_pt.any, _pt.any]),
  title: _pt.string,
  noVerticalAlign: _pt.bool
});

_defineProperty(SVGIcon, "defaultProps", {
  color: 'currentColor',
  size: IconSize.sm,
  noVerticalAlign: false
});
//# sourceMappingURL=SVGIcon.js.map