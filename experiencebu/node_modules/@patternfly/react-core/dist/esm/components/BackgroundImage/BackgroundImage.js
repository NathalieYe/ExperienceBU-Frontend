import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import cssVar from '@patternfly/react-tokens/dist/js/c_background_image_BackgroundImage';
import cssVarName2x from '@patternfly/react-tokens/dist/js/c_background_image_BackgroundImage_2x';
import cssVarNameSm from '@patternfly/react-tokens/dist/js/c_background_image_BackgroundImage_sm';
import cssVarNameSm2x from '@patternfly/react-tokens/dist/js/c_background_image_BackgroundImage_sm_2x';
import cssVarNameLg from '@patternfly/react-tokens/dist/js/c_background_image_BackgroundImage_lg';
import cssVarNameFilter from '@patternfly/react-tokens/dist/js/c_background_image_Filter';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/BackgroundImage/background-image';
const defaultFilter = React.createElement("filter", null, React.createElement("feColorMatrix", {
  type: "matrix",
  values: "1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0"
}), React.createElement("feComponentTransfer", {
  colorInterpolationFilters: "sRGB",
  result: "duotone"
}, React.createElement("feFuncR", {
  type: "table",
  tableValues: "0.086274509803922 0.43921568627451"
}), React.createElement("feFuncG", {
  type: "table",
  tableValues: "0.086274509803922 0.43921568627451"
}), React.createElement("feFuncB", {
  type: "table",
  tableValues: "0.086274509803922 0.43921568627451"
}), React.createElement("feFuncA", {
  type: "table",
  tableValues: "0 1"
})));
let filterCounter = 0;
export const BackgroundImage = (_ref) => {
  let {
    className,
    src,
    filter = defaultFilter
  } = _ref,
      props = _objectWithoutProperties(_ref, ["className", "src", "filter"]);

  const getUrlValue = size => {
    if (typeof src === 'string') {
      return `url(${src})`;
    } else if (typeof src === 'object') {
      return `url(${src[size]})`;
    }

    return '';
  };

  const filterId = `patternfly-background-image-filter-overlay${filterCounter++}`;
  const style = {
    [cssVar.name]: getUrlValue('xs'),
    [cssVarName2x.name]: getUrlValue('xs2x'),
    [cssVarNameSm.name]: getUrlValue('sm'),
    [cssVarNameSm2x.name]: getUrlValue('sm2x'),
    [cssVarNameLg.name]: getUrlValue('lg'),
    [cssVarNameFilter.name]: `url(#${filterId})`
  };
  return React.createElement("div", _extends({
    className: css(styles.backgroundImage, className),
    style: style
  }, props), React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "pf-c-background-image__filter",
    width: "0",
    height: "0"
  }, React.cloneElement(filter, {
    id: filterId
  })));
};
BackgroundImage.propTypes = {
  className: _pt.string,
  filter: _pt.element,
  src: _pt.oneOfType([_pt.string, _pt.shape({
    xs: _pt.string.isRequired,
    xs2x: _pt.string.isRequired,
    sm: _pt.string.isRequired,
    sm2x: _pt.string.isRequired,
    lg: _pt.string.isRequired
  })]).isRequired
};
//# sourceMappingURL=BackgroundImage.js.map