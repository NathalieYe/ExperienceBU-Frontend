{"ast":null,"code":"export let fileReaderType;\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\n\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n\nexport function readFile(fileHandle, type) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = () => reject(reader.error);\n\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}","map":{"version":3,"sources":["/Users/BenMeow/Desktop/BU 20 Spring/Spark/ExperienceBU-Frontend/experiencebu/node_modules/@patternfly/react-core/dist/esm/helpers/fileUtils.js"],"names":["fileReaderType","readFile","fileHandle","type","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","text","readAsText","dataURL","readAsDataURL"],"mappings":"AAAA,OAAO,IAAIA,cAAJ;AACP;;;;;;;;AAQA,CAAC,UAAUA,cAAV,EAA0B;AACzBA,EAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB,MAAzB;AACAA,EAAAA,cAAc,CAAC,SAAD,CAAd,GAA4B,SAA5B;AACD,CAHD,EAGGA,cAAc,KAAKA,cAAc,GAAG,EAAtB,CAHjB;;AAKA,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,IAA9B,EAAoC;AACzC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAA7B;;AAEAH,IAAAA,MAAM,CAACI,OAAP,GAAiB,MAAML,MAAM,CAACC,MAAM,CAACK,KAAR,CAA7B;;AAEA,QAAIT,IAAI,KAAKH,cAAc,CAACa,IAA5B,EAAkC;AAChCN,MAAAA,MAAM,CAACO,UAAP,CAAkBZ,UAAlB;AACD,KAFD,MAEO,IAAIC,IAAI,KAAKH,cAAc,CAACe,OAA5B,EAAqC;AAC1CR,MAAAA,MAAM,CAACS,aAAP,CAAqBd,UAArB;AACD,KAFM,MAEA;AACLI,MAAAA,MAAM,CAAC,cAAD,CAAN;AACD;AACF,GAdM,CAAP;AAeD","sourcesContent":["export let fileReaderType;\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\n\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n\nexport function readFile(fileHandle, type) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = () => reject(reader.error);\n\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}\n//# sourceMappingURL=fileUtils.js.map"]},"metadata":{},"sourceType":"module"}