{"ast":null,"code":"import _pt from \"prop-types\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Chip } from './Chip';\nimport { fillTemplate } from '../../helpers';\nexport const ChipGroupContext = React.createContext('');\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleCollapse\", () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    });\n\n    this.state = {\n      isOpen: this.props.defaultIsOpen\n    };\n  }\n\n  renderToolbarGroup() {\n    const {\n      isOpen\n    } = this.state;\n    const {\n      headingLevel = 'h4'\n    } = this.props;\n    return React.createElement(ChipGroupContext.Provider, {\n      value: headingLevel\n    }, React.createElement(InnerChipGroup, _extends({}, this.props, {\n      isOpen: isOpen,\n      onToggleCollapse: this.toggleCollapse\n    })));\n  }\n\n  renderChipGroup() {\n    const {\n      className\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n    return React.createElement(\"ul\", {\n      className: css(styles.chipGroup, className)\n    }, React.createElement(InnerChipGroup, _extends({}, this.props, {\n      isOpen: isOpen,\n      onToggleCollapse: this.toggleCollapse\n    })));\n  }\n\n  render() {\n    const {\n      withToolbar,\n      children\n    } = this.props;\n\n    if (React.Children.count(children)) {\n      return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();\n    }\n\n    return null;\n  }\n\n}\n\n_defineProperty(ChipGroup, \"propTypes\", {\n  children: _pt.node,\n  className: _pt.string,\n  defaultIsOpen: _pt.bool,\n  expandedText: _pt.string,\n  collapsedText: _pt.string,\n  withToolbar: _pt.bool,\n  headingLevel: _pt.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  numChips: _pt.number\n});\n\n_defineProperty(ChipGroup, \"defaultProps\", {\n  className: '',\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  withToolbar: false,\n  defaultIsOpen: false,\n  numChips: 3\n});\n\nconst InnerChipGroup = props => {\n  const {\n    children,\n    expandedText,\n    isOpen,\n    onToggleCollapse,\n    collapsedText,\n    withToolbar,\n    numChips\n  } = props;\n  const collapsedTextResult = fillTemplate(collapsedText, {\n    remaining: React.Children.count(children) - numChips\n  });\n  const mappedChildren = React.Children.map(children, c => {\n    const child = c;\n\n    if (withToolbar) {\n      return React.cloneElement(child, {\n        children: React.Children.toArray(child.props.children).map(chip => React.cloneElement(chip, {\n          component: 'li'\n        }))\n      });\n    }\n\n    return React.cloneElement(child, {\n      component: 'li'\n    });\n  });\n  return React.createElement(React.Fragment, null, isOpen ? React.createElement(React.Fragment, null, mappedChildren) : React.createElement(React.Fragment, null, mappedChildren.map((child, i) => {\n    if (i < numChips) {\n      return child;\n    }\n  })), React.Children.count(children) > numChips && React.createElement(Chip, {\n    isOverflowChip: true,\n    onClick: onToggleCollapse,\n    component: withToolbar ? 'div' : 'li'\n  }, isOpen ? expandedText : collapsedTextResult));\n};\n\nInnerChipGroup.propTypes = {\n  children: _pt.node,\n  className: _pt.string,\n  defaultIsOpen: _pt.bool,\n  expandedText: _pt.string,\n  collapsedText: _pt.string,\n  withToolbar: _pt.bool,\n  headingLevel: _pt.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  numChips: _pt.number,\n  isOpen: _pt.bool.isRequired,\n  onToggleCollapse: _pt.func.isRequired\n};","map":{"version":3,"sources":["C:/Users/tungb/Desktop/ExperienceBU/experiencebu/node_modules/@patternfly/react-core/dist/esm/components/ChipGroup/ChipGroup.js"],"names":["_pt","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","React","styles","css","Chip","fillTemplate","ChipGroupContext","createContext","ChipGroup","Component","constructor","props","setState","prevState","isOpen","state","defaultIsOpen","renderToolbarGroup","headingLevel","createElement","Provider","InnerChipGroup","onToggleCollapse","toggleCollapse","renderChipGroup","className","chipGroup","render","withToolbar","children","Children","count","node","string","bool","expandedText","collapsedText","oneOf","numChips","number","collapsedTextResult","remaining","mappedChildren","map","c","child","cloneElement","toArray","chip","component","Fragment","isOverflowChip","onClick","propTypes","isRequired","func"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Chip } from './Chip';\nimport { fillTemplate } from '../../helpers';\nexport const ChipGroupContext = React.createContext('');\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleCollapse\", () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    });\n\n    this.state = {\n      isOpen: this.props.defaultIsOpen\n    };\n  }\n\n  renderToolbarGroup() {\n    const {\n      isOpen\n    } = this.state;\n    const {\n      headingLevel = 'h4'\n    } = this.props;\n    return React.createElement(ChipGroupContext.Provider, {\n      value: headingLevel\n    }, React.createElement(InnerChipGroup, _extends({}, this.props, {\n      isOpen: isOpen,\n      onToggleCollapse: this.toggleCollapse\n    })));\n  }\n\n  renderChipGroup() {\n    const {\n      className\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n    return React.createElement(\"ul\", {\n      className: css(styles.chipGroup, className)\n    }, React.createElement(InnerChipGroup, _extends({}, this.props, {\n      isOpen: isOpen,\n      onToggleCollapse: this.toggleCollapse\n    })));\n  }\n\n  render() {\n    const {\n      withToolbar,\n      children\n    } = this.props;\n\n    if (React.Children.count(children)) {\n      return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();\n    }\n\n    return null;\n  }\n\n}\n\n_defineProperty(ChipGroup, \"propTypes\", {\n  children: _pt.node,\n  className: _pt.string,\n  defaultIsOpen: _pt.bool,\n  expandedText: _pt.string,\n  collapsedText: _pt.string,\n  withToolbar: _pt.bool,\n  headingLevel: _pt.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  numChips: _pt.number\n});\n\n_defineProperty(ChipGroup, \"defaultProps\", {\n  className: '',\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  withToolbar: false,\n  defaultIsOpen: false,\n  numChips: 3\n});\n\nconst InnerChipGroup = props => {\n  const {\n    children,\n    expandedText,\n    isOpen,\n    onToggleCollapse,\n    collapsedText,\n    withToolbar,\n    numChips\n  } = props;\n  const collapsedTextResult = fillTemplate(collapsedText, {\n    remaining: React.Children.count(children) - numChips\n  });\n  const mappedChildren = React.Children.map(children, c => {\n    const child = c;\n\n    if (withToolbar) {\n      return React.cloneElement(child, {\n        children: React.Children.toArray(child.props.children).map(chip => React.cloneElement(chip, {\n          component: 'li'\n        }))\n      });\n    }\n\n    return React.cloneElement(child, {\n      component: 'li'\n    });\n  });\n  return React.createElement(React.Fragment, null, isOpen ? React.createElement(React.Fragment, null, mappedChildren) : React.createElement(React.Fragment, null, mappedChildren.map((child, i) => {\n    if (i < numChips) {\n      return child;\n    }\n  })), React.Children.count(children) > numChips && React.createElement(Chip, {\n    isOverflowChip: true,\n    onClick: onToggleCollapse,\n    component: withToolbar ? 'div' : 'li'\n  }, isOpen ? expandedText : collapsedTextResult));\n};\n\nInnerChipGroup.propTypes = {\n  children: _pt.node,\n  className: _pt.string,\n  defaultIsOpen: _pt.bool,\n  expandedText: _pt.string,\n  collapsedText: _pt.string,\n  withToolbar: _pt.bool,\n  headingLevel: _pt.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),\n  numChips: _pt.number,\n  isOpen: _pt.bool.isRequired,\n  onToggleCollapse: _pt.func.isRequired\n};\n//# sourceMappingURL=ChipGroup.js.map"]},"metadata":{},"sourceType":"module"}